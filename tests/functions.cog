Def Foo as (+ 1);

Print If (Foo 4; == 5)
	'PASS: Function call and return'
else
	'FAIL: Function call and return';

Do (
	Def Foo as (+ 3);

	Print If (Foo 5; == 8)
		'PASS: Function shadowing 1'
	else
		'FAIL: Function shadowing 1';
);

Print If (Foo 7; == 8)
	'PASS: Function shadowing 2'
else
	'FAIL: Function shadowing 2';

~~ Mutation is TODO
~~Let Recurred be False;
~~Def Bar as
~~(
~~	Do If (== 0) (
~~		Set Recurred to True;
~~	) else (
~~		Bar with 0;
~~	);
~~);

~~call Bar with 10;
~~Print If (Recurred)
~~	'PASS: Recursion'
~~else
~~	'FAIL: Recursion';

~~ Put binary recursion test here when I implement binary recursion.

Def Binrec1
( Let X;
	Do If (X; > 1000) (Print 'PASS: Binary recursion')
	else (Binrec2 with + 1 X);
);

Def Binrec2
(
	Binrec1 with + 1;
);

Binrec1 1;
